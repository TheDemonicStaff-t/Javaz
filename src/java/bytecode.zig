pub const Inst = struct { name: []const u8, args: ?[]const Arg = null };
pub const Arg = enum { NULL_BYTE, CONST_BYTE, CONST_SHORT, CP_SHORT_IDX, CP_IDX, LV_IDX, BRANCH_OFF, BRANCH_OFF_LONG, JTABLE_16, JTABLE_8, ARRAY_TYPE, OPCODE };
pub const Instructions = [_]Inst{
    Inst{ .name = "nop" },
    Inst{ .name = "aconst_null" },
    Inst{ .name = "iconst_m1" },
    Inst{ .name = "iconst_0" },
    Inst{ .name = "iconst_1" },
    Inst{ .name = "iconst_2" },
    Inst{ .name = "iconst_3" },
    Inst{ .name = "iconst_4" },
    Inst{ .name = "iconst_5" },
    Inst{ .name = "lconst_0" },
    Inst{ .name = "lconst_1" },
    Inst{ .name = "fconst_0" },
    Inst{ .name = "fconst_1" },
    Inst{ .name = "fconst_2" },
    Inst{ .name = "dconst_0" },
    Inst{ .name = "dconst_1" },
    Inst{ .name = "bipush", .args = [_]Arg{.CONST_BYTE} },
    Inst{ .name = "sipush", .args = [_]Arg{.CONST_SHORT} },
    Inst{ .name = "ldc", .args = [_]Arg{.CP_SHORT_IDX} },
    Inst{ .name = "ldc_w", .args = [_]Arg{.CP_IDX} },
    Inst{ .name = "ldc2_w", .args = [_]Arg{.CP_IDX} },
    Inst{ .name = "iload", .args = [_]Arg{.LV_IDX} },
    Inst{ .name = "lload", .args = [_]Arg{.LV_IDX} },
    Inst{ .name = "fload", .args = [_]Arg{.LV_IDX} },
    Inst{ .name = "dload", .args = [_]Arg{.LV_IDX} },
    Inst{ .name = "aload", .args = [_]Arg{.LV_IDX} },
    Inst{ .name = "iload_0" },
    Inst{ .name = "iload_1" },
    Inst{ .name = "iload_2" },
    Inst{ .name = "iload_3" },
    Inst{ .name = "lload_0" },
    Inst{ .name = "lload_1" },
    Inst{ .name = "lload_2" },
    Inst{ .name = "lload_3" },
    Inst{ .name = "fload_0" },
    Inst{ .name = "fload_1" },
    Inst{ .name = "fload_2" },
    Inst{ .name = "fload_3" },
    Inst{ .name = "dload_0" },
    Inst{ .name = "dload_1" },
    Inst{ .name = "dload_2" },
    Inst{ .name = "dload_3" },
    Inst{ .name = "aload_0" },
    Inst{ .name = "aload_1" },
    Inst{ .name = "aload_2" },
    Inst{ .name = "aload_3" },
    Inst{ .name = "iaload" },
    Inst{ .name = "laload" },
    Inst{ .name = "faload" },
    Inst{ .name = "daload" },
    Inst{ .name = "aaload" },
    Inst{ .name = "baload" },
    Inst{ .name = "caload" },
    Inst{ .name = "saload" },
    Inst{ .name = "istore", .args = [_]Arg{.LV_IDX} },
    Inst{ .name = "lstore", .args = [_]Arg{.LV_IDX} },
    Inst{ .name = "fstore", .args = [_]Arg{.LV_IDX} },
    Inst{ .name = "dstore", .args = [_]Arg{.LV_IDX} },
    Inst{ .name = "astore", .args = [_]Arg{.LV_IDX} },
    Inst{ .name = "istore_0" },
    Inst{ .name = "istore_1" },
    Inst{ .name = "istore_2" },
    Inst{ .name = "istore_3" },
    Inst{ .name = "lstore_0" },
    Inst{ .name = "lstore_1" },
    Inst{ .name = "lstore_2" },
    Inst{ .name = "lstore_3" },
    Inst{ .name = "fstore_0" },
    Inst{ .name = "fstore_1" },
    Inst{ .name = "fstore_2" },
    Inst{ .name = "fstore_3" },
    Inst{ .name = "dstore_0" },
    Inst{ .name = "dstore_1" },
    Inst{ .name = "dstore_2" },
    Inst{ .name = "dstore_3" },
    Inst{ .name = "astore_0" },
    Inst{ .name = "astore_1" },
    Inst{ .name = "astore_2" },
    Inst{ .name = "astore_3" },
    Inst{ .name = "iastore" },
    Inst{ .name = "lastore" },
    Inst{ .name = "fastore" },
    Inst{ .name = "dastore" },
    Inst{ .name = "aastore" },
    Inst{ .name = "bastore" },
    Inst{ .name = "castore" },
    Inst{ .name = "sastore" },
    Inst{ .name = "pop" },
    Inst{ .name = "pop2" },
    Inst{ .name = "dup" },
    Inst{ .name = "dup_x1" },
    Inst{ .name = "dup_x2" },
    Inst{ .name = "dup2" },
    Inst{ .name = "dup2_x1" },
    Inst{ .name = "dup2_x2" },
    Inst{ .name = "swap" },
    Inst{ .name = "iadd" },
    Inst{ .name = "ladd" },
    Inst{ .name = "fadd" },
    Inst{ .name = "dadd" },
    Inst{ .name = "isub" },
    Inst{ .name = "lsub" },
    Inst{ .name = "fsub" },
    Inst{ .name = "dsub" },
    Inst{ .name = "imul" },
    Inst{ .name = "lmul" },
    Inst{ .name = "fmul" },
    Inst{ .name = "dmul" },
    Inst{ .name = "idiv" },
    Inst{ .name = "ldiv" },
    Inst{ .name = "fdiv" },
    Inst{ .name = "ddiv" },
    Inst{ .name = "irem" },
    Inst{ .name = "lrem" },
    Inst{ .name = "frem" },
    Inst{ .name = "drem" },
    Inst{ .name = "ineg" },
    Inst{ .name = "lneg" },
    Inst{ .name = "fneg" },
    Inst{ .name = "dneg" },
    Inst{ .name = "ishl" },
    Inst{ .name = "lshl" },
    Inst{ .name = "ishr" },
    Inst{ .name = "lshr" },
    Inst{ .name = "iushr" },
    Inst{ .name = "lushr" },
    Inst{ .name = "iand" },
    Inst{ .name = "land" },
    Inst{ .name = "ior" },
    Inst{ .name = "lor" },
    Inst{ .name = "ixor" },
    Inst{ .name = "lxor" },
    Inst{ .name = "iinc", .args = [_]Arg{ .LV_IDX, .CONST_BYTE } },
    Inst{ .name = "i2l" },
    Inst{ .name = "i2f" },
    Inst{ .name = "i2d" },
    Inst{ .name = "l2i" },
    Inst{ .name = "l2f" },
    Inst{ .name = "l2d" },
    Inst{ .name = "f2i" },
    Inst{ .name = "f2l" },
    Inst{ .name = "f2d" },
    Inst{ .name = "d2i" },
    Inst{ .name = "d2l" },
    Inst{ .name = "d2f" },
    Inst{ .name = "i2b" },
    Inst{ .name = "i2c" },
    Inst{ .name = "i2s" },
    Inst{ .name = "lcmp" },
    Inst{ .name = "fcmp" },
    Inst{ .name = "fcmpg" },
    Inst{ .name = "dcmpl" },
    Inst{ .name = "dcmpg" },
    Inst{ .name = "ifeq", .args = [_]Arg{.BRANCH_OFF} },
    Inst{ .name = "ifne", .args = [_]Arg{.BRANCH_OFF} },
    Inst{ .name = "iflt", .args = [_]Arg{.BRANCH_OFF} },
    Inst{ .name = "ifge", .args = [_]Arg{.BRANCH_OFF} },
    Inst{ .name = "ifgt", .args = [_]Arg{.BRANCH_OFF} },
    Inst{ .name = "ifle", .args = [_]Arg{.BRANCH_OFF} },
    Inst{ .name = "if_icmpeq", .args = [_]Arg{.BRANCH_OFF} },
    Inst{ .name = "if_icmpne", .args = [_]Arg{.BRANCH_OFF} },
    Inst{ .name = "if_icmplt", .args = [_]Arg{.BRANCH_OFF} },
    Inst{ .name = "if_icmpge", .args = [_]Arg{.BRANCH_OFF} },
    Inst{ .name = "if_icmpgt", .args = [_]Arg{.BRANCH_OFF} },
    Inst{ .name = "if_icmple", .args = [_]Arg{.BRANCH_OFF} },
    Inst{ .name = "if_acmpeq", .args = [_]Arg{.BRANCH_OFF} },
    Inst{ .name = "if_acmpne", .args = [_]Arg{.BRANCH_OFF} },
    Inst{ .name = "goto", .args = [_]Arg{.BRANCH_OFF} },
    Inst{ .name = "jsr", .args = [_]Arg{.BRANCH_OFF} },
    Inst{ .name = "ret", .args = [_]Arg{.LV_IDX} },
    Inst{ .name = "tableswitch", .args = [_]Arg{.JTABLE_16} },
    Inst{ .name = "lookupswitch", .args = [_]Arg{.JTABLE_8} },
    Inst{ .name = "ireturn" },
    Inst{ .name = "lreturn" },
    Inst{ .name = "freturn" },
    Inst{ .name = "dreturn" },
    Inst{ .name = "areturn" },
    Inst{ .name = "return" },
    Inst{ .name = "getstatic", .args = [_]Arg{.CP_SHORT_IDX} },
    Inst{ .name = "putstatic", .args = [_]Arg{.CP_SHORT_IDX} },
    Inst{ .name = "getfield", .args = [_]Arg{.CP_SHORT_IDX} },
    Inst{ .name = "putfield", .args = [_]Arg{.CP_SHORT_IDX} },
    Inst{ .name = "invokevirtual", .args = [_]Arg{.CP_SHORT_IDX} },
    Inst{ .name = "invokespecial", .args = [_]Arg{.CP_SHORT_IDX} },
    Inst{ .name = "invokestatic", .args = [_]Arg{.CP_SHORT_IDX} },
    Inst{ .name = "invokeinterface", .args = [_]Arg{ .CP_SHORT_IDX, .CONST_BYTE, .NULL_BYTE } },
    Inst{ .name = "invokedynamic", .args = [_]Arg{ .CP_SHORT_IDX, .NULL_BYTE, .NULL_BYTE } },
    Inst{ .name = "new", .args = [_]Arg{.CP_SHORT_IDX} },
    Inst{ .name = "newarray", .args = [_]Arg{.ARRAY_TYPE} },
    Inst{ .name = "anewarray", .args = [_]Arg{.CP_SHORT_IDX} },
    Inst{ .name = "arraylength" },
    Inst{ .name = "athrow" },
    Inst{ .name = "checkcast", .args = [_]Arg{.CP_SHORT_IDX} },
    Inst{ .name = "instanceof", .args = [_]Arg{.CP_SHORT_IDX} },
    Inst{ .name = "monitorenter" },
    Inst{ .name = "monitorexit" },
    Inst{ .name = "wide", .args = [_]Arg{.OPCODE} },
    Inst{ .name = "multianewarray", .args = [_]Arg{ .CP_SHORT_IDX, .CONST_BYTE } },
    Inst{ .name = "ifnull", .args = [_]Arg{.BRANCH_OFF} },
    Inst{ .name = "ifnonull", .args = [_]Arg{.BRANCH_OFF} },
    Inst{ .name = "goto_w", .args = [_]Arg{.BRANCH_OFF_LONG} },
    Inst{ .name = "jsr_w", .args = [_]Arg{.BRANCH_OFF_LONG} },
    Inst{ .name = "breakpoint" },
};
